Maximum Product of Three Numbers [D.E. Shaw Python Interview Question]
https://datalemur.com/questions/python-maximum-product-three-numbers
Given a list of integers, return the maximum product of any three numbers in the array.

For example, for A = [1, 3, 4, 5], you should return 60, since 
3
∗
4
∗
5
=
60
3∗4∗5=60.

For B = [−4, −2, 3, 5] you should return 40 since 
−
4
∗
−
2
∗
5
=
40
−4∗−2∗5=40

Solution:
#This apprach does the work but is a long road to reach the result hence more lines of code and takes nlogn
def max_three(input):
  input = sorted(input)
  negative_count = len([num for num in input if num < 0])
  if input[0] > 0:
    return input[-1]*input[-2]*input[-3]
  elif negative_count == 1:
    return input[-1]*input[-2]*input[-3]
  elif negative_count == len(input):
    return input[-1]*input[-2]*input[-3]
  elif negative_count%2 == 0:
    return input[0] * input[1] * input[-1]
    
#this function is still nlogn but reduces the lines of code significantly
def three(input):
    input.sort()
    return max(input[-1] * input[-2] * input[-3], input[0] * input[1] * input[-1])

import heapq
def max_three_heap(input):
  a = heapq.nlargest(3,input)
  b = heapq.nsmallest(2,input)
  return max(a[-1]*a[1]*a[0], b[1]*b[0]*a[0])
